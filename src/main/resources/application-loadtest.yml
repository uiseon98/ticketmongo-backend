# 🔥 AIBE1-Team03 부하테스트 전용 설정 파일
# 대기열 시스템을 우회하여 실제 서버 성능을 측정하기 위한 설정

app:
  queue:
    max-active-users: 2000  # 🎯 단계별 병목 감지용 (5 → 2000) - 1500명 목표에 여유분
    access-key-ttl-seconds: 7200  # 🕐 테스트 시간 고려해서 2시간으로 연장
    top-ranker-count: 200  # 🏆 대기열 순위 계산 최적화 (5 → 200)
  websocket:
    scheduler-health:
      delay-ms: 30000  # 📊 WebSocket 로깅 주기 연장 (10초 → 30초)

  # 🌐 도메인 설정 (운영과 동일)
  base-url: ${BASE_URL:https://d123456789.cloudfront.net}
  front-base-url: ${FRONT_BASE_URL}


seat:
  reservation:
    ttl-minutes: 10  # 🪑 좌석 선점 시간 연장 (5분 → 10분)
    max-seat-count: 5  # 🎫 사용자당 최대 선점 좌석 증가 (2개 → 5개)
    last-update-ttl-hours: 2  # ⏰ 캐시 TTL 연장 (1시간 → 2시간)
  polling:
    default-timeout-ms: 60000  # ⏱️ 폴링 타임아웃 증가 (30초 → 60초)
    max-timeout-ms: 120000  # 📈 최대 타임아웃 증가 (60초 → 120초)
    min-timeout-ms: 1000  # ⚡ 최소 타임아웃 감소 (5초 → 1초)
  session:
    max-sessions-per-concert: 5000  # 🎵 콘서트당 최대 세션 증가 (1000 → 5000)
    cleanup-minutes: 10  # 🧹 세션 정리 간격 연장 (5분 → 10분)
  lock:
    wait-time-seconds: 1  # 🔒 락 대기 시간 단축 (3초 → 1초)
    lease-time-seconds: 5  # ⏰ 락 보유 시간 단축 (10초 → 5초)
  cache:
    warmup-minutes-before: 30  # 🔥 캐시 워밍업 시간 연장 (10분 → 30분)

  scheduler:
    seat-cache-warmup:
      enabled: true
      interval-minutes: 2  # 🚀 실행 주기 단축 (5분 → 2분)
      warmup-minutes-before: 30  # 📈 워밍업 시간 연장
      lock-wait-seconds: 10  # ⚡ 락 대기 시간 단축 (30초 → 10초)
      lock-lease-seconds: 120  # ⏱️ 락 유지 시간 단축 (300초 → 120초)
    waiting-queue:
      enabled: true  # 🔄 대기열 스케줄러 활성화 (병목 테스트용)
      interval-seconds: 5  # ⚡ 실행 주기 단축 (10초 → 5초) - 빠른 대기열 처리

spring:
  application:
    name: ticketmon-go-scenario-test  # 🏷️ 시나리오 테스트 식별용 이름

  # 🔧 운영 환경 설정을 상속하되 부하테스트용으로 일부 수정
  profiles:
    include: s3  # S3 설정 포함

  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    # 🎯 시나리오 테스트용 커넥션 풀 최적화
    hikari:
      maximum-pool-size: 30  # 📈 단계별 증가 고려 (기본 10 → 30)
      minimum-idle: 10  # 🔄 기본 유휴 커넥션
      connection-timeout: 3000  # ⏱️ 빠른 응답 위한 타임아웃 단축
      idle-timeout: 600000  # 🕐 10분 유휴 타임아웃
      max-lifetime: 1800000  # ⏰ 30분 최대 생명주기

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false  # 🔇 부하테스트 중 SQL 로그 비활성화 (성능 향상)
    properties:
      hibernate:
        jdbc:
          batch_size: 50  # 📦 배치 크기 증가
        order_inserts: true  # 🔄 삽입 순서 최적화
        order_updates: true  # 🔄 업데이트 순서 최적화

  data:
    redis:
      host: ${SPRING_DATA_REDIS_HOST}
      port: ${SPRING_DATA_REDIS_PORT}
      username: ${SPRING_DATA_REDIS_USERNAME}
      password: ${SPRING_DATA_REDIS_PASSWORD}
      ssl:
        enabled: true
      # 🎯 시나리오 테스트용 Redis 커넥션 최적화
      lettuce:
        pool:
          max-active: 30  # 📈 대기열 처리 고려한 커넥션 수
          max-idle: 15  # 🔄 적정 유휴 커넥션
          min-idle: 5  # ⚡ 최소 유휴 커넥션
          max-wait: 2000ms  # ⏱️ 대기열 응답성 고려한 대기 시간

  # 🔧 OAuth 설정 (운영과 동일하게 유지)
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            client-name: Google
            authorization-grant-type: authorization_code
            redirect-uri: 'https://api.ticket-mon.o-r.kr/login/oauth2/code/google'
            scope:
              - profile
              - email

  servlet:
    multipart:
      max-file-size: 50MB  # 📁 파일 크기 제한 증가 (11MB → 50MB)
      max-request-size: 50MB

  # 🎯 시나리오 테스트용 태스크 스케줄링
  task:
    scheduling:
      enabled: true
      pool:
        size: 15  # 📈 대기열 + 좌석 스케줄러 고려 (10 → 15)
      thread-name-prefix: "scenario-scheduler-"
    execution:
      pool:
        core-size: 15  # 📈 시나리오 처리용 (8 → 15)
        max-size: 30  # 📈 최대 스레드 제한 (20 → 30)
        queue-capacity: 500  # 📦 적정 대기 큐 유지

server:
  port: ${SERVER_PORT:8080}
  # 🎯 시나리오 테스트용 서버 최적화
  tomcat:
    threads:
      max: 300  # 📈 1500명 동접 고려한 스레드 수 (기본 200 → 300)
      min-spare: 30  # 🔄 기본 유휴 스레드
    max-connections: 1500  # 🌐 목표 동접에 맞춘 커넥션 수
    accept-count: 200  # 📊 적정 대기 큐 크기
    connection-timeout: 3000  # ⏱️ 빠른 응답을 위한 타임아웃

# 📊 시나리오 테스트용 로깅 설정
logging:
  level:
    root: INFO  # 📝 병목 분석을 위한 정보 수집
    org.springframework.web: WARN  # 🔇 웹 로그 제한
    com.team03: DEBUG  # 🔍 팀 패키지 상세 로깅 (병목 분석용)
    com.team03.ticketmon.queue: INFO  # 🔴 대기열 로직 모니터링
    com.team03.ticketmon.seat: INFO  # 🪑 좌석 관련 로직 모니터링
    com.zaxxer.hikari: WARN  # 🔇 HikariCP 중요 로그만
    org.hibernate: WARN  # 🔇 Hibernate 경고만
    org.springframework.data.redis: WARN  # 🔇 Redis 경고만
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level [SCENARIO-TEST] %logger{36} - %msg%n"

# ☁️ AWS 설정 (운영과 동일)
cloud:
  aws:
    credentials:
      access-key: ${AWS_ACCESS_KEY_ID}
      secret-key: ${AWS_SECRET_ACCESS_KEY}
    region:
      static: ap-northeast-2
    s3:
      bucket: ticketmon-prod-assets
      profile-prefix: profile-imgs/
      poster-prefix: poster-imgs/
      seller-docs-prefix: seller-docs/

# 🔐 JWT 설정 (운영과 동일)
jwt:
  secret: ${JWT_SECRET_KEY}
  access-expiration-ms: ${JWT_ACCESS_EXPIRATION_MS:600000}
  refresh-expiration-ms: ${JWT_REFRESH_EXPIRATION_MS:86400000}

# ☁️ AWS SQS 설정 (운영과 동일)
aws:
  sqs:
    endpoint: ${SQS_ENDPOINT}
    access-key: ${AWS_ACCESS_KEY_ID}
    secret-key: ${AWS_SECRET_ACCESS_KEY}

# 📚 Swagger 설정
swagger:
  enabled: true  # 🔍 부하테스트 중 API 문서 활성화 (디버깅용)

# 💳 토스페이먼츠 설정 (운영과 동일)
toss:
  client-key: ${TOSS_CLIENT_KEY}
  secret-key: ${TOSS_SECRET_KEY}
  api:
    url: https://api.tosspayments.com/v1/payments/
    confirm-url: ${toss.api.url}confirm

# 🤖 AI 설정 (운영과 동일)
ai:
  together:
    api-key: ${TOGETHER_API_KEY}
    api-url: https://api.together.xyz/v1/chat/completions
    model: meta-llama/Llama-3.3-70B-Instruct-Turbo-Free
    timeout-seconds: 30
    max-retries: 3
    max-tokens-per-request: 100000
    max-reviews-per-request: 50
    chars-per-token: 2.5
    token-safety-margin: 0.2

  summary:
    condition:
      min-review-count: 10
      significant-count-change: 3
      significant-count-change-ratio: 0.2
      update-on-any-content-change: true
      max-update-interval-hours: 168

# 🌍 CORS 설정 (부하테스트용 추가)
cors:
  allowed-origins:
    - "https://ticket-mon.o-r.kr"
    - "https://api.ticket-mon.o-r.kr"
    - "http://localhost:3000"  # 🧪 로컬 테스트용
    - "*"  # 🚀 부하테스트 중 모든 Origin 허용

# 📱 OneSignal 설정 (운영과 동일)
onesignal:
  app-id: ${ONESIGNAL_APP_ID}
  api-key: ${ONESIGNAL_API_KEY}

# 🎯 시나리오 테스트 전용 설정
scenario-test:
  enabled: true  # 🚀 시나리오 테스트 모드 활성화
  target-concurrent-users: 1500  # 📈 목표 동접 사용자 수
  queue-gradual-expansion: true  # 🔄 단계별 대기열 확장 모드
  bottleneck-detection: true  # 🔍 병목 감지 모드 활성화
  performance-monitoring: true  # 📊 성능 모니터링 활성화
  stage-based-testing: true  # 📈 단계별 테스트 모드