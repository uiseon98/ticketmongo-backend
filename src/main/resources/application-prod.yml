spring:
  # Spring Boot 자동 설정을 제외할 항목을 명시
  # AWS S3 자동 설정은 's3' 프로필에서 관리되므로, prod 환경에서 기본적으로 제외
  autoconfigure:
    exclude:
      - io.awspring.cloud.autoconfigure.s3.S3AutoConfiguration

  # 'prod' 프로필이 활성화될 때 's3' 프로필도 함께 포함
  # 이를 통해 운영 환경에서는 S3 관련 빈만 로드됨
  profiles:
    include: s3

  # 운영 데이터베이스 연결 설정
  # 모든 값은 환경 변수로부터 주입 (보안상 민감 정보 직접 노출 금지)
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  # JPA (Hibernate) 관련 설정
  jpa:
    hibernate:
      ddl-auto: validate             # 운영 환경에서는 DDL 자동 변경을 금지하고 스키마 유효성만 검사
    show-sql: false                  # 운영 환경에서는 SQL 쿼리 출력을 비활성화하여 성능 및 보안을 강화
    #    properties:
    #     hibernate:
    #       format_sql: false # 운영 환경에서는 쿼리 포맷팅도 성능에 영향을 줄 수 있으므로 비활성화가 권장
    # 이 설정이 필요하다면 주석을 해제하고 'false'로 명시해주세요.

  # Redis 연결 설정
  # 모든 값은 환경 변수로부터 주입
  data:
    redis:
      host: ${SPRING_DATA_REDIS_HOST}
      port: ${SPRING_DATA_REDIS_PORT}
      username: ${SPRING_DATA_REDIS_USERNAME}
      password: ${SPRING_DATA_REDIS_PASSWORD}
      ssl:
        enabled: true

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            client-name: Google
            authorization-grant-type: authorization_code
            redirect-uri: 'https://api.ticket-mon.o-r.kr/login/oauth2/code/google'
            scope:
              - profile
              - email
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: 'https://api.ticket-mon.o-r.kr/login/oauth2/code/naver'
            scope:
              - name
              - email
            provider: naver
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            client-name: Kakao
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: 'https://api.ticket-mon.o-r.kr/login/oauth2/code/kakao'
            scope:
              - profile_nickname
              - account_email
            provider: kakao
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

# 🌐 운영환경 도메인 설정 (CloudFront CDN)
app:
  base-url: ${BASE_URL:https://d123456789.cloudfront.net}  # 환경변수 우선, 기본값은 예시 도메인
  front-base-url: ${FRONT_BASE_URL}
# ☁️ AWS S3 관련 설정
# 's3' 프로필이 활성화될 때 이 설정이 로드
# 실제 AWS Access Key, Secret Key는 환경 변수 또는 보안 저장소에서 주입받아야 함
cloud:
  aws:
    credentials:
      # 액세스 키와 시크릿 키는 환경 변수 (예: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY) 또는 보안 저장소에서 주입
      access-key: ${AWS_ACCESS_KEY_ID}         # 🔒 AWS IAM 사용자 Access Key
      secret-key: ${AWS_SECRET_ACCESS_KEY}     # 🔒 AWS IAM 사용자 Secret Key
    region:
      static: ap-northeast-2                     # 예시: 서울 리전 (실제 운영 환경에 맞게 변경)
    s3:
      bucket: ticketmon-prod-assets         # [권장] 운영 환경용 S3 버킷 이름 (개발 환경과 다르게 설정)
      # prefix(폴더) 기준 관리, supabase → s3 마이그레이션에 최적화
      profile-prefix: profile-imgs/        # 프로필 이미지 저장 경로 접두사 (예: profile-imgs/{userId}.jpg)
      poster-prefix: poster-imgs/          # 포스터 이미지 저장 경로 접두사 (예: poster-imgs/{posterId}.jpg)
      seller-docs-prefix: seller-docs/     # 판매자 서류 저장 경로 접두사 (예: seller-docs/{docId}.pdf)
      # 실제 Key: {prefix}{파일명}
      # 운영 배포시 prod-assets, dev는 dev-assets 등 환경 분리

# 🔐 JWT (JSON Web Token) 관련 설정
# 모든 값은 환경 변수로부터 주입
jwt:
  secret: ${JWT_SECRET_KEY} # openssl rand -base64 32
  access-expiration-ms: ${JWT_ACCESS_EXPIRATION_MS:600000}
  refresh-expiration-ms: ${JWT_REFRESH_EXPIRATION_MS:86400000}

# ☁️ AWS SQS (Simple Queue Service) 관련 설정
# 모든 값은 환경 변수로부터 주입
aws:
  sqs:
    endpoint: ${SQS_ENDPOINT}
    access-key: ${AWS_ACCESS_KEY_ID}
    secret-key: ${AWS_SECRET_ACCESS_KEY}

# 📊 로깅 레벨 설정
# 운영 환경에서는 불필요한 로그 생성을 줄이기 위해 로그 레벨을 높게 설정
logging:
  level:
    root: WARN  # 기본 로그 레벨을 WARN으로 설정
    # HTTP 요청/응답 및 웹 관련 로깅 상세화
    org.springframework.web: DEBUG
    com.team03: DEBUG  # 팀 패키지의 로그 레벨을 INFO로 설정합니다. (필요시 WARN 또는 ERROR로 더 제한 가능)
    # WARN -> 실시간 모니터링 툴이 있지 않다면, 불필요한 로그까지 나오는 걸 방지할 수 있음

# 📚 Swagger API 문서 설정
swagger:
  enabled: false  # 운영 환경에서는 보안을 위해 Swagger 문서를 비활성화

# 💳 토스페이먼츠 환경변수 주입
toss:
  client-key: ${TOSS_CLIENT_KEY} # 환경 변수에서 주입
  secret-key: ${TOSS_SECRET_KEY} # 환경 변수에서 주입

# 🤖 Together AI API 설정
ai:
  together:
    api-key: ${TOGETHER_API_KEY} # 환경 변수에서 주입
    api-url: https://api.together.xyz/v1/chat/completions
    model: meta-llama/Llama-3.3-70B-Instruct-Turbo-Free
    timeout-seconds: 30
    max-retries: 3

# 🌍 CORS 설정
cors:
  allowed-origins:
    - "http://3.36.130.171:8080"          # 프론트엔드 도메인
    - "http://localhost:3000"      # API 도메인

onesignal:
  app-id: ${ONESIGNAL_APP_ID}        # 운영 환경에서 환경 변수로 관리
  api-key: ${ONESIGNAL_API_KEY}
