package com.team03.ticketmon._global.util.s3;

import com.team03.ticketmon._global.config.AppProperties;
import com.team03.ticketmon._global.util.StoragePathProvider;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Component;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import java.net.URI;
import java.util.Optional;
import java.util.UUID;

@Slf4j
@Component
@Profile("s3")
@RequiredArgsConstructor
public class S3PathProvider implements StoragePathProvider {

    @Value("${cloud.aws.s3.bucket}")
    private String s3BucketName;
    @Value("${cloud.aws.s3.profile-prefix}")
    private String profilePrefix;
    @Value("${cloud.aws.s3.poster-prefix}")
    private String posterPrefix;
    @Value("${cloud.aws.s3.seller-docs-prefix}")
    private String sellerDocsPrefix;
    @Value("${cloud.aws.region.static}")
    private String region;

    private final AppProperties appProperties;

    @Override
    public String getProfilePath(String uuid, String fileExtension) {
        return String.format("%s%s.%s", profilePrefix, uuid, fileExtension);
    }

    @Override
    public String getPosterPath(Long concertId, String fileExtension) {
        String timestamp = String.valueOf(System.currentTimeMillis());
        String uuid = UUID.randomUUID().toString().substring(0, 8);
        return String.format("%s%d_%s_%s.%s", posterPrefix, concertId, timestamp, uuid, fileExtension);
    }

    @Override
    public String getSellerDocsPath(String uuid, String fileExtension) {
        return String.format("%s%s.%s", sellerDocsPrefix, uuid, fileExtension);
    }

    @Override
    public String getProfileBucketName() {
        return s3BucketName;
    }

    @Override
    public String getPosterBucketName() {
        return s3BucketName;
    }

    @Override
    public String getDocsBucketName() {
        return s3BucketName;
    }

    // S3 ÏßÅÏ†ë URL Ìå®ÌÑ¥ ÌôïÏù∏ Í≥µÌÜµ Î©îÏÑúÎìú
    public boolean isS3DirectUrl(String url) {
        if (url == null || url.isEmpty()) {
            return false;
        }
        String s3UrlPattern = getS3DirectUrlPrefix();
        return url.startsWith(s3UrlPattern);
    }

    // S3 ÏßÅÏ†ë URL Ï†ëÎëêÏÇ¨ ÏÉùÏÑ± Í≥µÌÜµ Î©îÏÑúÎìú
    private String getS3DirectUrlPrefix() {
        return String.format("https://%s.s3.%s.amazonaws.com/", s3BucketName, region);
    }

    @Override
    public Optional<String> extractPathFromPublicUrl(String publicUrl, String bucketName) {
        if (publicUrl == null || publicUrl.isEmpty() || bucketName == null || bucketName.isEmpty())
            return Optional.empty();

        try {
            URI uri = URI.create(publicUrl);
            String path = uri.getPath();

            // Path-style URL (Ïòà: /bucket-name/key)
            if (path.startsWith("/" + bucketName + "/")) {
                return Optional.of(path.substring(("/" + bucketName + "/").length()));
            } else if (path.startsWith("/" + bucketName)) {
                // Î£®Ìä∏ Í≤ΩÎ°úÏóê Î∞îÎ°ú ÌååÏùºÏù¥ ÏûàÎäî Í≤ΩÏö∞ (Ïòà: /bucket-name -> file.jpg)
                return Optional.of(path.substring(("/" + bucketName).length()).replaceFirst("/", ""));
            } else {
                // Virtual-hosted style URL (Ïòà: bucket-name.s3.region.amazonaws.com/key)
                // URI.getPath()Îäî Ïù¥ÎØ∏ Í∞ùÏ≤¥ ÌÇ§Îßå Î∞òÌôò (ÏïûÏóê Ïä¨ÎûòÏãú ÏûàÏùÑ Ïàò ÏûàÏùå)
                return Optional.of(path.startsWith("/") ? path.substring(1) : path);
            }
        } catch (IllegalArgumentException e) {
            return Optional.empty();
        }
    }

    /**
     * S3 ÏßÅÏ†ë URL ÎòêÎäî Supabase URLÏùÑ CloudFront URLÎ°ú Î≥ÄÌôòÌï©ÎãàÎã§.
     *
     * @param originalUrl Î≥ÄÌôòÌï† ÏõêÎ≥∏ URL (S3 ÏßÅÏ†ë URL, Supabase URL, ÎòêÎäî Ïù¥ÎØ∏ CloudFront URL)
     * @return CloudFront URLÎ°ú Î≥ÄÌôòÎêú URL ÎòêÎäî Í∏∞Î≥∏ Ïù¥ÎØ∏ÏßÄ URL
     */
    @Override
    public String getCloudFrontImageUrl(String originalUrl) {
        if (originalUrl == null || originalUrl.trim().isEmpty()) {
            // nullÏù¥Í±∞ÎÇò Îπà URLÏù∏ Í≤ΩÏö∞ Í∏∞Î≥∏ Ïù¥ÎØ∏ÏßÄ Î∞òÌôò
            String baseUrl = appProperties.baseUrl();
            String imagePath = "images/basic-poster-image.png";
            if (baseUrl.endsWith("/")) {
                return baseUrl + imagePath;
            } else {
                return baseUrl + "/" + imagePath;
            }
        }

        // Supabase URL ‚Üí CloudFront URL Î≥ÄÌôò (ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖòÎêú Îç∞Ïù¥ÌÑ∞ ÎåÄÏùë)
        if (originalUrl.contains("supabase.co")) {
            log.debug("üîÑ Supabase URLÏùÑ CloudFront URLÎ°ú Î≥ÄÌôò: {}", originalUrl);
            return convertSupabaseUrlToCloudFront(originalUrl);
        }

        // S3 ÏßÅÏ†ë URL ‚Üí CloudFront URL Î≥ÄÌôò
        if (isS3DirectUrl(originalUrl)) {
            log.debug("üîÑ S3 ÏßÅÏ†ë URLÏùÑ CloudFront URLÎ°ú Î≥ÄÌôò: {}", originalUrl);
            String s3DirectUrlPrefix = getS3DirectUrlPrefix();
            String s3Key = originalUrl.substring(s3DirectUrlPrefix.length());

            String baseUrl = appProperties.baseUrl();
            if (baseUrl.endsWith("/")) {
                return baseUrl + s3Key;
            } else {
                return baseUrl + "/" + s3Key;
            }
        }

        // Ïù¥ÎØ∏ CloudFront URLÏù¥Í±∞ÎÇò Îã§Î•∏ ÌòïÌÉúÏùò URLÏù∏ Í≤ΩÏö∞ Í∑∏ÎåÄÎ°ú Î∞òÌôò
        return originalUrl;
    }

    /**
     * Supabase URLÏùÑ CloudFront URLÎ°ú Î≥ÄÌôòÌï©ÎãàÎã§.
     * ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Í≥ºÏ†ïÏóêÏÑú DBÏóê Ï†ÄÏû•Îêú Supabase URLÎì§ÏùÑ CloudFront URLÎ°ú Î≥ÄÌôòÌïòÎäî Ïö©ÎèÑÏûÖÎãàÎã§.
     *
     * @param supabaseUrl Î≥ÄÌôòÌï† Supabase URL
     * @return CloudFront URLÎ°ú Î≥ÄÌôòÎêú URL
     */
    private String convertSupabaseUrlToCloudFront(String supabaseUrl) {
        try {
            // Supabase URL Ìå®ÌÑ¥:
            // https://weorddukxzwozckuxqkx.supabase.co/storage/v1/object/public/bucket-name/path/file.ext
            String publicMarker = "/storage/v1/object/public/";
            int markerIndex = supabaseUrl.indexOf(publicMarker);

            if (markerIndex == -1) {
                log.warn("‚ö†Ô∏è Supabase URL Ìå®ÌÑ¥Ïù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏùå: {}", supabaseUrl);
                return supabaseUrl; // Ìå®ÌÑ¥Ïù¥ Ïïà ÎßûÏúºÎ©¥ ÏõêÎ≥∏ Î∞òÌôò
            }

            // "/storage/v1/object/public/" Ïù¥ÌõÑ Î∂ÄÎ∂Ñ Ï∂îÏ∂ú
            String pathAfterMarker = supabaseUrl.substring(markerIndex + publicMarker.length());

            // bucket-name/pathÏóêÏÑú Ï≤´ Î≤àÏß∏ "/" Ïù¥ÌõÑÍ∞Ä Ïã§Ï†ú ÌååÏùº Í≤ΩÎ°ú
            int firstSlash = pathAfterMarker.indexOf('/');
            if (firstSlash == -1) {
                log.warn("‚ö†Ô∏è Supabase URL Í≤ΩÎ°úÍ∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏùå: {}", supabaseUrl);
                return supabaseUrl;
            }

            String bucketName = pathAfterMarker.substring(0, firstSlash);
            String filePath = pathAfterMarker.substring(firstSlash + 1);

            log.debug("üìÅ Ï∂îÏ∂úÎêú Supabase Î≤ÑÌÇ∑: {}, ÌååÏùºÍ≤ΩÎ°ú: {}", bucketName, filePath);

            // Î≤ÑÌÇ∑Î≥Ñ S3 Í≤ΩÎ°ú Îß§Ìïë
            String s3Path = mapSupabaseBucketToS3Path(bucketName, filePath);

            String baseUrl = appProperties.baseUrl();
            String cloudFrontUrl;
            if (baseUrl.endsWith("/")) {
                cloudFrontUrl = baseUrl + s3Path;
            } else {
                cloudFrontUrl = baseUrl + "/" + s3Path;
            }

            log.debug("‚úÖ CloudFront URL Î≥ÄÌôò ÏôÑÎ£å: {} ‚Üí {}", supabaseUrl, cloudFrontUrl);
            return cloudFrontUrl;

        } catch (Exception e) {
            log.error("‚ùå Supabase URL Î≥ÄÌôò Ïã§Ìå®: {}", supabaseUrl, e);
            return supabaseUrl; // Î≥ÄÌôò Ïã§Ìå® Ïãú ÏõêÎ≥∏ Î∞òÌôò
        }
    }

    /**
     * Supabase Î≤ÑÌÇ∑Î™ÖÏùÑ S3 Í≤ΩÎ°úÎ°ú Îß§ÌïëÌï©ÎãàÎã§.
     * ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Í≥ºÏ†ïÏóêÏÑú Supabase Î≤ÑÌÇ∑ Íµ¨Ï°∞Î•º S3 Ìè¥Îçî Íµ¨Ï°∞Î°ú Î≥ÄÌôòÌï©ÎãàÎã§.
     *
     * @param supabaseBucket Supabase Î≤ÑÌÇ∑Î™Ö
     * @param filePath Supabase ÎÇ¥ ÌååÏùº Í≤ΩÎ°ú
     * @return S3ÏóêÏÑú ÏÇ¨Ïö©Ìï† ÌååÏùº Í≤ΩÎ°ú
     */
    private String mapSupabaseBucketToS3Path(String supabaseBucket, String filePath) {
        switch (supabaseBucket) {
            case "ticketmon-dev-poster-imgs":
                // concert/poster/1_1234567890_abc123.jpg ‚Üí poster-imgs/1_1234567890_abc123.jpg
                return "poster-imgs/" + extractFileName(filePath);

            case "ticketmon-dev-profile-imgs":
                // user/profile/uuid123.jpg ‚Üí profile-imgs/uuid123.jpg
                return "profile-imgs/" + extractFileName(filePath);

            case "ticketmon-dev-seller-docs":
                // seller/docs/doc456.pdf ‚Üí seller-docs/doc456.pdf
                return "seller-docs/" + extractFileName(filePath);

            default:
                log.warn("‚ö†Ô∏è Ïïå Ïàò ÏóÜÎäî Supabase Î≤ÑÌÇ∑: {}", supabaseBucket);
                return extractFileName(filePath); // Ïïå Ïàò ÏóÜÎäî Î≤ÑÌÇ∑ÏùÄ ÌååÏùºÎ™ÖÎßå ÏÇ¨Ïö©
        }
    }

    /**
     * ÌååÏùº Í≤ΩÎ°úÏóêÏÑú ÌååÏùºÎ™ÖÎßå Ï∂îÏ∂úÌï©ÎãàÎã§.
     * Ìè¥Îçî Íµ¨Ï°∞Î•º Ï†úÍ±∞ÌïòÍ≥† Ïã§Ï†ú ÌååÏùºÎ™ÖÎßå Î∞òÌôòÌï©ÎãàÎã§.
     *
     * @param filePath Ï†ÑÏ≤¥ ÌååÏùº Í≤ΩÎ°ú
     * @return ÌååÏùºÎ™ÖÎßå Ï∂îÏ∂úÎêú Î¨∏ÏûêÏó¥
     */
    private String extractFileName(String filePath) {
        // Ïòà: "concert/poster/1_1234567890_abc123.jpg" ‚Üí "1_1234567890_abc123.jpg"
        int lastSlash = filePath.lastIndexOf('/');
        return lastSlash >= 0 ? filePath.substring(lastSlash + 1) : filePath;
    }
}