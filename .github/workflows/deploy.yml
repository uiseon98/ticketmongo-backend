# 워크플로우의 이름
name: Backend CI/CD (GitHub Packages)

# 워크플로우 실행 조건: main 브랜치에 push 이벤트 발생 시
on:
  push:
    branches: [ "main" ]

# 실행될 작업(job) 목록
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # GHCR에 이미지를 쓰기 위한 권한

    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # 3. GitHub Container Registry (ghcr.io)에 로그인
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 4. Docker 이미지 빌드 및 GHCR에 푸시
      - name: Build and push to GitHub Container Registry
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}:latest
          no-cache: true
          build-args: |
            USERNAME=${{ github.actor }}
            TOKEN=${{ secrets.GITHUB_TOKEN }}

      # 5. EC2에 접속하여 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # GHCR 로그인
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # 기존 컨테이너 중지 및 삭제
            docker stop ticketmongo-backend || true
            docker rm ticketmongo-backend || true
            
            # GHCR에서 최신 이미지 받기
            docker pull ghcr.io/${{ github.repository }}:latest

            # Docker 컨테이너 실행 (프로필 지정은 Dockerfile에서 처리)
            docker run -d --name ticketmongo-backend -p 80:8080 \
              -e DB_URL="${{ secrets.DB_URL }}" \
              -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -e SPRING_DATA_REDIS_HOST="${{ secrets.SPRING_DATA_REDIS_HOST }}" \
              -e SPRING_DATA_REDIS_PORT="${{ secrets.SPRING_DATA_REDIS_PORT }}" \
              -e SPRING_DATA_REDIS_SSL="${{ secrets.SPRING_DATA_REDIS_SSL }}" \
              -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
              -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              -e JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
              -e JWT_ACCESS_EXPIRATION_MS="${{ secrets.JWT_ACCESS_EXPIRATION_MS }}" \
              -e JWT_REFRESH_EXPIRATION_MS="${{ secrets.JWT_REFRESH_EXPIRATION_MS }}" \
              -e TOSS_CLIENT_KEY="${{ secrets.TOSS_CLIENT_KEY }}" \
              -e TOSS_SECRET_KEY="${{ secrets.TOSS_SECRET_KEY }}" \
              -e TOGETHER_API_KEY="${{ secrets.TOGETHER_API_KEY }}" \
              -e GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
              -e GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
              -e NAVER_CLIENT_ID="${{ secrets.NAVER_CLIENT_ID }}" \
              -e NAVER_CLIENT_SECRET="${{ secrets.NAVER_CLIENT_SECRET }}" \
              -e KAKAO_CLIENT_ID="${{ secrets.KAKAO_CLIENT_ID }}" \
              -e KAKAO_CLIENT_SECRET="${{ secrets.KAKAO_CLIENT_SECRET }}" \
              -e BASE_URL="${{ secrets.BASE_URL }}" \
              -e ONESIGNAL_API_KEY="${{ secrets.ONESIGNAL_API_KEY }}" \
              -e ONESIGNAL_APP_ID="${{ secrets.ONESIGNAL_APP_ID }}" \
              -e FRONT_BASE_URL="${{ secrets.FRONT_BASE_URL }}" \
              ghcr.io/${{ github.repository }}:latest

      # 6. Discord 알림
      - name: Discord Notification
        if: always()
        uses: appleboy/discord-action@master
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          message: |
            **Backend CI/CD Status: ${{ job.status }}**
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
            <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow Run>