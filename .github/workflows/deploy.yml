name: Deploy to EC2

# 트리거 설정
on:
  workflow_run:
    workflows: [ "Backend CI Pipeline" ] # 'Backend CI Pipeline' 완료시 트리거
    types:
      - completed   # 해당 워크플로우가 종료(성공/실패 무관)되면 실행됨
  workflow_dispatch:  # 항상 수동 실행 버튼도 활성화

jobs:
  deploy:
    # 조건: 자동 실행시 "Backend CI Pipeline" 성공시에만 실행 + 수동 실행 시 무조건 실행
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    runs-on: ubuntu-latest

    steps:
      - name: Deploy Docker container on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}       # EC2 공개 IP 혹은 도메인
          username: ${{ secrets.EC2_USER }}   # EC2 접속 유저 (대개 ubuntu)
          key: ${{ secrets.EC2_KEY }}         # SSH 로그인용 프라이빗 키 (.pem 내용)
          port: 22                           # 기본 SSH 포트

          script: |
            echo "===== Docker Login ====="
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            # GHCR 로그인, 이미지 pull 및 docker run 가능하도록 인증

            echo "===== Docker Pull ====="
            docker pull ghcr.io/${{ github.repository }}:latest
            # 최신 이미지 EC2에 다운로드

            echo "===== Stop/Remove Old Container ====="
            docker stop ticketmon-backend || true
            docker rm ticketmon-backend || true
            # 예전 컨테이너가 있으면 종료 및 삭제 (없어도 에러 무시)

            echo "===== Run New Container ====="
            docker run -d \
              --name ticketmon-backend \            # 컨테이너 이름(ticketmon-backend)
              -p 80:8080 \                          # EC2 80포트를 컨테이너 8080포트로 매핑
              -e SPRING_PROFILES_ACTIVE=prod \     # Spring Profile 설정(prod)
              -e DB_URL="${{ secrets.DB_URL }}" \                 # DB 접속 URL (환경변수)
              -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \       # DB 사용자명
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \       # DB 비밀번호
              -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \   # AWS IAM 키 (필요시)
              -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              -e BASE_URL="${{ secrets.BASE_URL }}" \                   # 서버 URL (API)
              -e FRONT_BASE_URL="${{ secrets.FRONT_BASE_URL }}" \       # 프론트 URL
              ghcr.io/${{ github.repository }}:latest                   # 실행할 이미지 경로
