name: Backend CI Pipeline

on:
  push:
    branches:
      - dev # dev 브랜치에 푸시될 때 실행
      - main    # main 브랜치에 푸시될 때 실행 (release 후 merge 시)
  pull_request:
    branches:
      - dev # dev 브랜치로 PR 생성/업데이트 시 실행
  # 여기에 CI 파이프라인 수동 실행 버튼을 추가합니다!
  workflow_dispatch:

jobs:
#  build-and-test:
#    runs-on: ubuntu-latest
  build-only: # 작업 이름 변경: 테스트 제외하고 빌드만 수행
    runs-on: ubuntu-latest

    permissions: # GHCR에 푸시하기 위한 권한 추가
      contents: read
      packages: write

    services:
      # redis-cache 서비스 제거: Aiven Redis를 사용하므로 CI 환경에서 Redis를 띄울 필요 없음
      localstack: # LocalStack 서비스 (SQS, S3 등 AWS 서비스 모킹)
        image: localstack/localstack:latest
        ports:
          - 4566:4566 # LocalStack 기본 포트
        env: # LocalStack 컨테이너 내부에 필요한 환경 변수
          SERVICES: sqs,s3 # 필요한 AWS 서비스만 지정 (예: SQS, S3)
          AWS_DEFAULT_REGION: ap-northeast-2
        options: >- # 헬스체크 (LocalStack이 준비될 때까지 기다림)
          --health-cmd "awslocal sqs list-queues"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      # 참고: 이 부분은 파일 권한 부여에 해당하며, 원본 파일의 "run: chmod +x gradlew"와 동일

      # Configure Redis for CI 단계 제거: Aiven Redis를 사용하므로 CI 환경에서 Redis 설정이 필요 없음

      - name: Configure LocalStack for CI # LocalStack 환경 변수 설정
        run: |
          echo "SQS_ENDPOINT=http://localstack:4566" >> $GITHUB_ENV # 서비스 이름을 호스트로 사용
          echo "::add-mask::${{ secrets.AWS_ACCESS_KEY }}"  # AWS Access Key를 로그에서 마스킹
          echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> $GITHUB_ENV # Secrets에서 주입
          echo "::add-mask::${{ secrets.AWS_SECRET_KEY }}" # AWS Secret Key를 로그에서 마스킹
          echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> $GITHUB_ENV # Secrets에서 주입

      - name: Configure GitHub Packages for Gradle  # GH_PACKAGES 환경변수 설정
        run: |
          echo "GH_PACKAGES_USER=${{ secrets.GH_PACKAGES_USER }}" >> $GITHUB_ENV
          echo "::add-mask::${{ secrets.GH_PACKAGES_TOKEN }}"
          echo "GH_PACKAGES_TOKEN=${{ secrets.GH_PACKAGES_TOKEN }}" >> $GITHUB_ENV

      - name: Build with Gradle (Excluding Tests) # 테스트 제외하고 빌드만 수행하도록 명령 변경
        run: ./gradlew build -x test # '-x test' 옵션으로 테스트 태스크 제외

      - name: Set up Docker Buildx # Docker Buildx 설정 (Docker 빌드 성능 향상)
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry # GHCR 로그인
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # GitHub 사용자명
          password: ${{ secrets.GITHUB_TOKEN }} # GitHub Actions에서 제공하는 기본 토큰

      - name: Convert Repository Name to Lowercase
        id: repo_lower_step # 스텝 ID
        run: |
          REPO_LOWERCASE=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO_LOWERCASE=$REPO_LOWERCASE" >> $GITHUB_ENV

      - name: Build and Push Docker Image # Docker 이미지 빌드 및 GHCR에 푸시
        uses: docker/build-push-action@v5
        with:
          context: . # Dockerfile이 있는 경로 (프로젝트 루트)
          file: ./Dockerfile # Dockerfile 경로
          push: true # GHCR로 푸시
          tags: ghcr.io/${{ env.REPO_LOWERCASE }}:latest # 이미지 태그 (예: ghcr.io/your-org/your-repo:latest)
          # cache-from: type=gha # GitHub Actions 캐시 사용 (선택 사항, 빌드 속도 향상)
          # cache-to: type=gha,mode=max # GitHub Actions 캐시 저장 (선택 사항, 빌드 속도 향상)
          no-cache: true
          build-args: |
            GH_PACKAGES_USER=${{ secrets.GH_PACKAGES_USER }}
            GH_PACKAGES_TOKEN=${{ secrets.GH_PACKAGES_TOKEN }}

        # Upload Test Report 단계 제거: 테스트를 수행하지 않으므로 테스트 보고서를 업로드할 필요 없음
        # 만약 나중에 테스트를 다시 포함할 경우 이 단계를 다시 추가

      - name: Discord Message Notify # Discord 알림 추가
        if: always() # 빌드 성공, 실패, 취소와 상관없이 항상 실행
        uses: appleboy/discord-action@v1.2.0 # Discord 알림 액션 사용
        with:
          # 기존 webhook_id와 webhook_token 대신 webhook_url 사용
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }} # Discord 웹훅 URL (Secrets에서 가져옴)
          username: 'GitHub Actions CI Bot' # Discord에 표시될 봇 이름
          avatar_url: 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png' # 봇 아바타 URL
          message: |  # Discord에 보낼 메시지 내용
            **Backend CI Pipeline Status**
            Repository: `${{ github.repository }}`
            Branch: `${{ github.ref_name }}`
            Commit: `${{ github.sha }}`
            Status: `${{ job.status }}`
            <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow Run>
          # 색상 설정 (선택 사항, job.status에 따라 변경 가능)
          # color: ${{ job.status == 'success' && '#00FF00' || job.status == 'failure' && '#FF0000' || '#FFFF00' }}
